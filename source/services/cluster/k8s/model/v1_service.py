# -*- coding: utf-8 -*-
from __future__ import annotations
from services.cluster.k8s.model.base_model import BaseModel
from services.cluster.k8s.model.v1_service_spec import V1ServiceSpec
from services.cluster.k8s.model.v1_object_meta import V1ObjectMeta
from services.cluster.k8s.const.crd_kubeflow_const import KUBEFLOW_V1_VERSION, KUBEFLOW_SERVICE_KIND

import pprint


class V1Service(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    spec: V1ServiceSpec
    openapi_types = {
        'api_version': 'str',
        'kind': 'str',
        'metadata': 'V1ObjectMeta',
        'spec': 'V1ServiceSpec',
        'status': 'V1ServiceStatus'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'kind': 'kind',
        'metadata': 'metadata',
        'spec': 'spec',
        'status': 'status'
    }

    @classmethod
    def default(cls, name, namespace, annotations, labels, cluster_ip, ports, selector):
        a = cls.new(api_version=KUBEFLOW_V1_VERSION,
                    kind=KUBEFLOW_SERVICE_KIND,
                    metadata=V1ObjectMeta.default(name=name, namespace=namespace, annotations=annotations,
                                                  labels=labels),
                    spec=V1ServiceSpec.default(cluster_ip=cluster_ip, ports=ports, selector=selector),
                    status=None)
        # print("SERVICE")
        # pprint.pprint(a)
        return a

    @staticmethod
    def new(api_version: str, kind: str, metadata: V1ObjectMeta, spec: V1ServiceSpec, status):
        return V1Service(api_version=api_version, kind=kind, metadata=metadata, spec=spec, status=status)
