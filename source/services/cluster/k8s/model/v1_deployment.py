from services.cluster.k8s.model.base_model import BaseModel
from services.cluster.k8s.model.v1_object_meta import V1ObjectMeta
from services.cluster.k8s.model.v1_deployment_spec import V1DeploymentSpec
from services.cluster.k8s.const.workloads_const import APPS_API_VERSION_V1, DEPLOYMENT_KIND
from typing import Dict

class V1Deployment(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'kind': 'str',
        'metadata': 'V1ObjectMeta',
        'spec': 'V1DeploymentSpec',
        'status': 'V1DeploymentStatus'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'kind': 'kind',
        'metadata': 'metadata',
        'spec': 'spec',
        'status': 'status'
    }


    @classmethod
    def default(cls, name: str, namespace: str, image: str, labels: Dict[str, str], resources: Dict[str, str], envs: Dict[str, str]):
        return cls.new(api_version=APPS_API_VERSION_V1,
                       kind=DEPLOYMENT_KIND,
                       metadata=V1ObjectMeta.default(name=name, namespace=namespace, labels=labels),
                       spec=V1DeploymentSpec.default(name=name,
                                                     image=image,
                                                     labels=labels,
                                                     resources=resources,
                                                     envs=envs))

    @staticmethod
    def new(api_version: str, kind: str, metadata: V1ObjectMeta, spec: V1DeploymentSpec, status=None):
        return V1Deployment(api_version=api_version,
                            kind=kind,
                            metadata=metadata,
                            spec=spec,
                            status=status)
