from services.cluster.k8s.model.base_model import GenericMixin
from services.cluster.k8s.model.v1_pod_template_spec import V1PodTemplateSpec
from services.cluster.k8s.model.v1_label_selector import V1LabelSelector
from typing import Dict


class V1DeploymentSpec(GenericMixin):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    replicas: int
    template: V1PodTemplateSpec
    selector: V1LabelSelector
    openapi_types = {
        # 'min_ready_seconds': 'int',
        # 'paused': 'bool',
        # 'progress_deadline_seconds': 'int',
        'replicas': 'int',
        # 'revision_history_limit': 'int',
        'selector': 'V1LabelSelector',
        # 'strategy': 'V1DeploymentStrategy',
        'template': 'V1PodTemplateSpec'
    }

    attribute_map = {
        'min_ready_seconds': 'minReadySeconds',
        'paused': 'paused',
        'progress_deadline_seconds': 'progressDeadlineSeconds',
        'replicas': 'replicas',
        'revision_history_limit': 'revisionHistoryLimit',
        'selector': 'selector',
        'strategy': 'strategy',
        'template': 'template'
    }

    @classmethod
    def default(cls, name: str, image: str, labels: Dict[str, str], resources: Dict[str, str], envs: Dict[str, str]):
        return cls.new(replicas=1,
                       template=V1PodTemplateSpec.deployment(name=name,
                                                             image=image,
                                                             labels=labels,
                                                             resource=resources,
                                                             envs=envs),
                       selector=V1LabelSelector.default(match_labels=labels))

    @staticmethod
    def new(replicas: int, template: V1PodTemplateSpec, selector: V1LabelSelector):
        return V1DeploymentSpec(replicas=replicas, template=template, selector=selector)